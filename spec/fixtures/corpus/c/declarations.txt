==========================================
simple declarations
==========================================

int x;

---

(translation_unit
  (declaration (identifier) (identifier)))

==========================================
simple functions
==========================================

int main() {
}

---

(translation_unit (function_definition
  (identifier)
  (function_declarator (identifier))
  (compound_statement)))

==========================================
ambiguous declarations
==========================================

int main() {
  // declare a function pointer
  A * b(int a);

  // evaluate an expression
  c * d(5);
}

---

(translation_unit (function_definition
  (identifier)
  (function_declarator (identifier))
  (compound_statement
    (comment)
    (declaration
      (identifier)
      (pointer_declarator (function_declarator (identifier) (parameter_declaration (identifier) (identifier))))
      (comment))
    (expression_statement (math_expression
      (identifier)
      (call_expression (identifier) (number)))))))

==========================================
ambiguous expressions
==========================================

int main() {
  // cast vs parenthesized product
  a((B *)c);
  d((e * f));
}

---

(translation_unit (function_definition
  (identifier)
  (function_declarator (identifier))
  (compound_statement
    (comment)
    (expression_statement (call_expression
      (identifier)
      (cast_expression (type_name (identifier) (abstract_pointer_declarator)) (identifier))))
    (expression_statement (call_expression
      (identifier)
      (math_expression (identifier) (identifier)))))))

==========================================
function-like macros that produce types
==========================================

GIT_INLINE(int) x = 5;

---

(translation_unit (declaration
  (macro_type (identifier) (identifier))
  (identifier)
  (initializer (number))))

============================================
3-way ambiguities (regression)
============================================

int main() {
  /*
   * Could be either:
   *   - function call
   *   - declaration w/ parenthesized declarator
   *   - declaration w/ macro type, no declarator
   */
  ABC(d);

  efg hij;
}

---

(translation_unit
  (function_definition
    (identifier)
    (function_declarator (identifier))
    (compound_statement
      (comment)
      (declaration (identifier) (identifier))
      (declaration (identifier) (identifier)))))
