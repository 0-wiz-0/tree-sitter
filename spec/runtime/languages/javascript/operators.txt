==========================================
parses function calls
==========================================
x.theMethod(5, 6);
---
(program (expression_statement (function_call
    (property_access (identifier) (identifier))
    (number) (number))))

==========================================
parses constructor calls
==========================================
var x = new Node(5, new Node(3, null));
---
(program (var_declaration
    (assignment (identifier)
        (constructor_call (function_call (identifier)
            (number)
            (constructor_call (function_call (identifier)
                (number)
                (null))))))))

==========================================
parses property access with dot notation
==========================================
object.property = "the-value";
print(object.property);
---
(program
    (expression_statement (assignment
        (property_access (identifier) (identifier))
        (string)))
    (expression_statement (function_call
        (identifier)
        (property_access (identifier) (identifier)))))

===========================================
parses dynamic property access
==========================================
object[propertName()] = propertyValue();
print(object[propertyName()]);
---
(program
    (expression_statement (assignment
        (property_access (identifier) (function_call (identifier)))
        (function_call (identifier))))
    (expression_statement (function_call
        (identifier)
        (property_access (identifier) (function_call (identifier))))))

==========================================
parses ternary expressions
==========================================
print(isDone() ? stuff : otherStuff);
---
(program (expression_statement
    (function_call
        (identifier)
        (ternary (function_call (identifier)) (identifier) (identifier)))))

==========================================
parses mathematical operators
==========================================
-a + b * c - d / +e
---
(program (expression_statement
    (math_op
        (math_op (identifier))
        (math_op
            (math_op (identifier) (identifier))
            (math_op (identifier) (math_op (identifier)))))))

==========================================
parses boolean operators
=========================================
!a || !(b && c)
---
(program (expression_statement
    (bool_op
        (bool_op (identifier))
        (bool_op
            (expression (bool_op (identifier) (identifier)))))))

===========================================
parses the type operators
===========================================
print((x instanceof Array) || (typeof x == "string"))
---
(program (expression_statement (function_call (identifier)
    (bool_op
        (expression (instanceof_expression (identifier) (identifier)))
        (expression (typeof_expression (bool_op (identifier) (string))))))))

============================================
parses the 'in' operator
===========================================
print(x in y)
---
(program (expression_statement (function_call
    (identifier)
    (in_expression (identifier) (identifier)))))

============================================
parses property access and operators
============================================
print(x.y.z && a.b.c)
---
(program (expression_statement (function_call (identifier)
    (bool_op
        (property_access (property_access (identifier) (identifier)) (identifier))
        (property_access (property_access (identifier) (identifier)) (identifier))))))
